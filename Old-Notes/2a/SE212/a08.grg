proc main() {
@ x == x0 & x >= y @
	if (y â‰¤ 2) then {
		@ x == x0 & x >= y & y <= 2 @  by If-Then-Else
		@ x + 2 >= x0 + y by Implied(VC1)
		x := x + 2;
		@ x >= x0 + y @ by Asn

	} else {
		@ x == x0 & x >= y & !(y <= 2) @ by If-Then-Else
		if !(x == 0) then {
			@ x == x0 & x >= y & !(y <= 2) & !(x == 0) @ by If-Then
			@2 * x >= x0 + y @ by Implied(VC2)
			x := 2 * x;
			@ x >= x0 + y @  by Asn
		};
		@ x >= x0 + y @ by Implied(VC3)
	};
@ x >= x0 + y @ by If-Then-Else
}

VC1
x == x0 & x >= y & y <= 2 |= x + 2 >= x0 + y
1) x == x0 & x >= y & y <= 2 premise
2) x == x0 by and_e on 1
3) y <= 2 by and_e on 1
4) x + 2 == x0 + 2 by arith(common) on 2
5) x + 2 >= x0 + y by arith(common) on 3, 4

VC2
x == x0 & x >= y & !(y <= 2) & !(x == 0) |= 2 * x >= x0 + y
1) x == x0 & x >= y & !(y <= 2) & !(x == 0) premise
2) x == x0 by and_e on 1
3) x >= y by and_e on 1
4) x0 + x >= x0 + y by arith(common) on 3
5) x + x >= x0 + y by eq_e on 2, 4
6) 2 * x >= x0 + y by arith(common) on 5

VC3 
x == x0 & x >= y & !(y <= 2) & x == 0 |= x >= x0 + y
1) x == x0 & x >= y & !(y <= 2) & x == 0 premise
2) x == x0 by and_e on 1
3) x >= y by and_e on 1
4) !(y <= 2) by and_e on 1
5) x == 0 by and_e on 1
6) disprove !(x >= x0 + y) {
	7) 0 >= y by eq_e on 3, 5
	8) y > 2 by arith(common) on 4
	9) 0 >= 2 by arith(comparisons) on 7,8
	10) false by arith(common) on 9
}
11) x >= x0 + y by raa on 6-10


2)
proc main() {
	@ y >= 1 & x >= 0 @
	s := x * y;
	@ s == x * y @ Asn
	while y > 1 do {
		@ s == x * y & y > 1 @ Invariant & Guard
		@ s == x * y @ and_e
		@ s == x * (y - 1 + 1) arith(common)
		y := y - 1;
		@ s == x * (y + 1) Asn
		@ s == x * y + x @ arith(common)
		@ s - x == x * y @ arith(common)
		k := x;
		@ s - k == x * y @ Asn
		while !(k == 0) do {
			@ s - k == x * y & !(k == 0) @ Invariant & guard
			@ s - k == x * y @ and_e
			@ s - (k - 1) - 1 == x * y @ arith(common)
			k := k - 1;
			@ s - k - 1 == x * y @ Asn
			s := s - 1;
			@ s - k == x * y @ Asn
		};
		@ s - k == x * y & k == 0 @ Partial While
		@ s == x * y @ Implied(VC1)

	};
	@ s == x * y & !(y > 1) @ Partial While
	@ s == x @ Implied(VC2)
}

VC1
s - k == x * y & k == 0 |= s == x * y
1) s - k == x * y & k == 0 premise
2) s - k == x * y by and_e on 1
3) k == 0 by and_e on 1
4) s == x * y by eq_e on 2, 3

VC2
s == x * y & !(y > 1) |= s == x
hp1) y >= 1 & x >= 0
1) s == x * y & !(y > 1) premise
2) s == x * y by and_e on 1
3) !(y > 1) by and_e on 1
4) y <= 1 by arith(common) on 3
5) y >= 1 by and_e on hp1
6) y == 1 by arith(common) on 5
7) s == x by eq_e on 2, 6

3)
proc main() {
	@ n >= 0 @
	i := n -1;
	@ i == n - 1 @ Asn
	@ A j . i < j & j < n => b[j] == c[j] @ Implied(VC1)
	while (i >= 0) do {
		@ A j . i < j & j < n => b[j] == c[j] & i >= 0 @ Invariant & Guard
		@ A j . i < j & j < n => b[j] == c[j] @ and_e
		b[i] := c[i];
		@ b[i] == c[i] @ Asn
		@ A j . i < j & j < n => b[j] == c[j] & b[i] == c[i] @ and_i
		@ A j . i <= j & j < n => b[j] == c[j] @ arith(common)
		@ A j . i - 1 < j & j < n => b[j] == c[j] @ arith(common)
		i := i - 1;
		@ A j . i < j & j < n => b[j] == c[j] @ Asn
	};
	@ A j . i < j & j < n => b[j] == c[j] & i < 0 @ Partial While
	@ A k . 0 <= k & k < n => b[k] == c[k] @ Implied(VC2)
}

VC1
n >= 0 & i == n - 1 |= A j . i < j & j < n => b[j] == c[j]
1) n >= 0 premise
2) i == n - 1 premise
3) n - 1 >= -1 by arith(common) on 1
4) i >= -1 by equals_e on 2, 3
45) for every j {
	5) assume i < j & j < n {
		51) i < j by and_e on 5
		52) j < n by and_e on 5
		53) disprove !(b[j] == c[j]) {
			531) -1 < j by arith(common) on 4, 51
			532) j < 0 by arith(common) on 1, 52
			533) false by arith(common) on 531, 532
		}
		54) b[j] == c[j] by raa on 53-533
	}
	6) i < j & j < n => b[j] == c[j] by imp_i on 5-54
}
7) A j . i < j & j < n => b[j] == c[j] by forall_i on 45-6
	
VC2
A j . i < j & j < n => b[j] == c[j] & i < 0 |= A k . 0 <= k & k < n => b[k] == c[k]
1) A j . i < j & j < n => b[j] == c[j] premise
2) i < 0 premise
3) for every kg {
	31) assume 0 <= kg & kg < n {
		311) i < kg & kg < n => b[kg] == c[kg] by forall_e on 1
		312) 0 <= kg & kg < n => b[kg] == c[kg] by arith(common) on 2, 311
		313) b[kg] == c[kg] by imp_e on 31, 312
	}
	32) 0 <= kg & kg < n => b[kg] == c[kg] by raa on 31-313
}
4) A k . 0 <= k & k < n => b[k] == c[k] by forall_i on 3-32
