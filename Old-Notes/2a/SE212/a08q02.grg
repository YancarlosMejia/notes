#u lajaneck kcarruth
#a 08
#q 02


#check PC
proc main() {
	@ y >= 1 & x >= 0 @
	s := x * y;
	@ s == x * y @ 												%Asn
	while y > 1 do {
		@ s == x * y & y > 1 @ 									%Invariant & Guard
		@ s == x * y @ 											%Implied(and_e)
	 	@ s == x * (y - 1 + 1) 									%Implied(arith)
		y := y - 1;
		@ s == x * (y + 1) 										%Asn
		@ s == x * y + x @ 										%Implied(arith)
		@ s - x == x * y @ 										%Implied(arith)
		k := x;
		@ s - k == x * y @ 										%Asn
		while !(k == 0) do {
			@ s - k == x * y & !(k == 0) @ 						%Invariant & guard
			@ s - k == x * y @ 									%Implied(and_e)
	 		@ s - (k - 1) - 1 == x * y @ 						%Implied(arith)
			k := k - 1;
			@ s - k - 1 == x * y @ 								%Asn
			s := s - 1;
			@ s - k == x * y @ 									%Asn
		};
		@ s - k == x * y & k == 0 @ 							%Partial While
		@ s == x * y @ 											%Implied(VC1)

	};
	@ s == x * y & !(y > 1) @ 									%Partial While
	@ s == x @													%Implied(VC2)
}

#check ND
%VC1
s - k == x * y & k == 0 |= s == x * y
1) s - k == x * y & k == 0 											premise
2) s - k == x * y 													by and_e on 1
3) k == 0 															by and_e on 1
4) s == x * y 														by eq_e on 2, 3

%VC2
s == x * y & !(y > 1) |= s == x
hp1) y >= 1 & x >= 0 												premise
1) s == x * y & !(y > 1) 											premise
2) s == x * y 														by and_e on 1
3) !(y > 1) 														by and_e on 1
4) y <= 1 															by arith(common) on 3
5) y >= 1 															by and_e on hp1
6) y == 1 															by arith(common) on 5
7) s == x															by eq_e on 2, 6